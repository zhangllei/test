[33mcommit 5c3eac20321346269998dec7d013778c94acd36d[m[33m ([m[1;36mHEAD -> [m[1;32mmaster[m[33m, [m[1;31morigin/testTow[m[33m, [m[1;32mtestTow[m[33m)[m
Author: username <you@example.com>
Date:   Sat Jun 23 19:09:16 2018 +0800

    API description

[1mdiff --git a/HEAD b/HEAD[m
[1mnew file mode 100644[m
[1mindex 0000000..cb089cd[m
[1m--- /dev/null[m
[1m+++ b/HEAD[m
[36m@@ -0,0 +1 @@[m
[32m+[m[32mref: refs/heads/master[m
[1mdiff --git a/config b/config[m
[1mnew file mode 100644[m
[1mindex 0000000..64280b8[m
[1m--- /dev/null[m
[1m+++ b/config[m
[36m@@ -0,0 +1,6 @@[m
[32m+[m[32m[core][m
[32m+[m	[32mrepositoryformatversion = 0[m
[32m+[m	[32mfilemode = false[m
[32m+[m	[32mbare = true[m
[32m+[m	[32msymlinks = false[m
[32m+[m	[32mignorecase = true[m
[1mdiff --git a/demo.txt b/demo.txt[m
[1mnew file mode 100644[m
[1mindex 0000000..d1d06ad[m
[1m--- /dev/null[m
[1m+++ b/demo.txt[m
[36m@@ -0,0 +1 @@[m
[32m+[m[32m1111[m
\ No newline at end of file[m
[1mdiff --git a/description b/description[m
[1mnew file mode 100644[m
[1mindex 0000000..498b267[m
[1m--- /dev/null[m
[1m+++ b/description[m
[36m@@ -0,0 +1 @@[m
[32m+[m[32mUnnamed repository; edit this file 'description' to name the repository.[m
[1mdiff --git a/hooks/applypatch-msg.sample b/hooks/applypatch-msg.sample[m
[1mnew file mode 100644[m
[1mindex 0000000..a5d7b84[m
[1m--- /dev/null[m
[1m+++ b/hooks/applypatch-msg.sample[m
[36m@@ -0,0 +1,15 @@[m
[32m+[m[32m#!/bin/sh[m
[32m+[m[32m#[m
[32m+[m[32m# An example hook script to check the commit log message taken by[m
[32m+[m[32m# applypatch from an e-mail message.[m
[32m+[m[32m#[m
[32m+[m[32m# The hook should exit with non-zero status after issuing an[m
[32m+[m[32m# appropriate message if it wants to stop the commit.  The hook is[m
[32m+[m[32m# allowed to edit the commit message file.[m
[32m+[m[32m#[m
[32m+[m[32m# To enable this hook, rename this file to "applypatch-msg".[m
[32m+[m
[32m+[m[32m. git-sh-setup[m
[32m+[m[32mcommitmsg="$(git rev-parse --git-path hooks/commit-msg)"[m
[32m+[m[32mtest -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}[m
[32m+[m[32m:[m
[1mdiff --git a/hooks/commit-msg.sample b/hooks/commit-msg.sample[m
[1mnew file mode 100644[m
[1mindex 0000000..b58d118[m
[1m--- /dev/null[m
[1m+++ b/hooks/commit-msg.sample[m
[36m@@ -0,0 +1,24 @@[m
[32m+[m[32m#!/bin/sh[m
[32m+[m[32m#[m
[32m+[m[32m# An example hook script to check the commit log message.[m
[32m+[m[32m# Called by "git commit" with one argument, the name of the file[m
[32m+[m[32m# that has the commit message.  The hook should exit with non-zero[m
[32m+[m[32m# status after issuing an appropriate message if it wants to stop the[m
[32m+[m[32m# commit.  The hook is allowed to edit the commit message file.[m
[32m+[m[32m#[m
[32m+[m[32m# To enable this hook, rename this file to "commit-msg".[m
[32m+[m
[32m+[m[32m# Uncomment the below to add a Signed-off-by line to the message.[m
[32m+[m[32m# Doing this in a hook is a bad idea in general, but the prepare-commit-msg[m
[32m+[m[32m# hook is more suited to it.[m
[32m+[m[32m#[m
[32m+[m[32m# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')[m
[32m+[m[32m# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"[m
[32m+[m
[32m+[m[32m# This example catches duplicate Signed-off-by lines.[m
[32m+[m
[32m+[m[32mtest "" = "$(grep '^Signed-off-by: ' "$1" |[m
[32m+[m	[32m sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {[m
[32m+[m	[32mecho >&2 Duplicate Signed-off-by lines.[m
[32m+[m	[32mexit 1[m
[32m+[m[32m}[m
[1mdiff --git a/hooks/fsmonitor-watchman.sample b/hooks/fsmonitor-watchman.sample[m
[1mnew file mode 100644[m
[1mindex 0000000..e673bb3[m
[1m--- /dev/null[m
[1m+++ b/hooks/fsmonitor-watchman.sample[m
[36m@@ -0,0 +1,114 @@[m
[32m+[m[32m#!/usr/bin/perl[m
[32m+[m
[32m+[m[32muse strict;[m
[32m+[m[32muse warnings;[m
[32m+[m[32muse IPC::Open2;[m
[32m+[m
[32m+[m[32m# An example hook script to integrate Watchman[m
[32m+[m[32m# (https://facebook.github.io/watchman/) with git to speed up detecting[m
[32m+[m[32m# new and modified files.[m
[32m+[m[32m#[m
[32m+[m[32m# The hook is passed a version (currently 1) and a time in nanoseconds[m
[32m+[m[32m# formatted as a string and outputs to stdout all files that have been[m
[32m+[m[32m# modified since the given time. Paths must be relative to the root of[m
[32m+[m[32m# the working tree and separated by a single NUL.[m
[32m+[m[32m#[m
[32m+[m[32m# To enable this hook, rename this file to "query-watchman" and set[m
[32m+[m[32m# 'git config core.fsmonitor .git/hooks/query-watchman'[m
[32m+[m[32m#[m
[32m+[m[32mmy ($version, $time) = @ARGV;[m
[32m+[m
[32m+[m[32m# Check the hook interface version[m
[32m+[m
[32m+[m[32mif ($version == 1) {[m
[32m+[m	[32m# convert nanoseconds to seconds[m
[32m+[m	[32m$time = int $time / 1000000000;[m
[32m+[m[32m} else {[m
[32m+[m	[32mdie "Unsupported query-fsmonitor hook version '$version'.\n" .[m
[32m+[m	[32m    "Falling back to scanning...\n";[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mmy $git_work_tree;[m
[32m+[m[32mif ($^O =~ 'msys' || $^O =~ 'cygwin') {[m
[32m+[m	[32m$git_work_tree = Win32::GetCwd();[m
[32m+[m	[32m$git_work_tree =~ tr/\\/\//;[m
[32m+[m[32m} else {[m
[32m+[m	[32mrequire Cwd;[m
[32m+[m	[32m$git_work_tree = Cwd::cwd();[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mmy $retry = 1;[m
[32m+[m
[32m+[m[32mlaunch_watchman();[m
[32m+[m
[32m+[m[32msub launch_watchman {[m
[32m+[m
[32m+[m	[32mmy $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')[m
[32m+[m	[32m    or die "open2() failed: $!\n" .[m
[32m+[m	[32m    "Falling back to scanning...\n";[m
[32m+[m
[32m+[m	[32m# In the query expression below we're asking for names of files that[m
[32m+[m	[32m# changed since $time but were not transient (ie created after[m
[32m+[m	[32m# $time but no longer exist).[m
[32m+[m	[32m#[m
[32m+[m	[32m# To accomplish this, we're using the "since" generator to use the[m
[32m+[m	[32m# recency index to select candidate nodes and "fields" to limit the[m
[32m+[m	[32m# output to file names only. Then we're using the "expression" term to[m
[32m+[m	[32m# further constrain the results.[m
[32m+[m	[32m#[m
[32m+[m	[32m# The category of transient files that we want to ignore will have a[m
[32m+[m	[32m# creation clock (cclock) newer than $time_t value and will also not[m
[32m+[m	[32m# currently exist.[m
[32m+[m
[32m+[m	[32mmy $query = <<"	END";[m
[32m+[m		[32m["query", "$git_work_tree", {[m
[32m+[m			[32m"since": $time,[m
[32m+[m			[32m"fields": ["name"],[m
[32m+[m			[32m"expression": ["not", ["allof", ["since", $time, "cclock"], ["not", "exists"]]][m
[32m+[m		[32m}][m
[32m+[m	[32mEND[m
[32m+[m
[32m+[m	[32mprint CHLD_IN $query;[m
[32m+[m	[32mclose CHLD_IN;[m
[32m+[m	[32mmy $response = do {local $/; <CHLD_OUT>};[m
[32m+[m
[32m+[m	[32mdie "Watchman: command returned no output.\n" .[m
[32m+[m	[32m    "Falling back to scanning...\n" if $response eq "";[m
[32m+[m	[32mdie "Watchman: command returned invalid output: $response\n" .[m
[32m+[m	[32m    "Falling back to scanning...\n" unless $response =~ /^\{/;[m
[32m+[m
[32m+[m	[32mmy $json_pkg;[m
[32m+[m	[32meval {[m
[32m+[m		[32mrequire JSON::XS;[m
[32m+[m		[32m$json_pkg = "JSON::XS";[m
[32m+[m		[32m1;[m
[32m+[m	[32m} or do {[m
[32m+[m		[32mrequire JSON::PP;[m
[32m+[m		[32m$json_pkg = "JSON::PP";[m
[32m+[m	[32m};[m
[32m+[m
[32m+[m	[32mmy $o = $json_pkg->new->utf8->decode($response);[m
[32m+[m
[32m+[m	[32mif ($retry > 0 and $o->{error} and $o->{error} =~ m/unable to resolve root .* directory (.*) is not watched/) {[m
[32m+[m		[32mprint STDERR "Adding '$git_work_tree' to watchman's watch list.\n";[m
[32m+[m		[32m$retry--;[m
[32m+[m		[32mqx/watchman watc